/**
 * NuevaCitaVista.java
 * Adnana Catrinel Dragut
 * v1.0 29/04/2022.
 * 
 */
package vista.vistasUsuarioSanitario;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import control.Hospital;
import control.OyenteVista;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import modelo.clasesDTOs.CitaPacienteDTO;
import modelo.clasesDTOs.PacienteDTO;
import modelo.clasesDTOs.SanitarioDTO;
import modelo.clasesDTOs.Tupla;
import modelo.clasesDTOs.Ubicacion;
import modelo.clasesProxys.Comms;
import modelo.clasesProxys.ProxyCitaPaciente;
import modelo.clasesProxys.ProxySanitario;

/**
 * Clase que contiene los métodos para crear y gestionar 
 * los componentes y los eventos de la pantalla NuevaCitaVista.
 * 
 */
public class NuevaCitaVista extends javax.swing.JFrame implements PropertyChangeListener {
    private MenuGestionPacientesVista menuGestionPacientesVista = null;
    private Comms comms = null;
    private Gson gson = null;
    private OyenteVista oyenteVista = null;
    private String idConexion = null;
    private PacienteDTO pacienteSeleccionado = null;
    private ProxySanitario pxSanitario = null;
    List<SanitarioDTO> sanitarios = null;
    
    private final int INDEX_NOMBRE_MEDICO = 0;
    private final int INDEX_APELLIDO_1_MEDICO = 1;
    private final int INDEX_APELLIDO_2_MEDICO = 2;
    private final int INDEX_MEDICO_NO_SELECCIONADO = -1;
    
    /* Mensajes de Error */
    public final static String ERROR_NUEVA_CITA = 
            "No se ha podido realizar la operación para añadir una nueva cita.\n" + 
            "Vuelva a introducir los datos.";
    public final static String ERROR_OBTENER_SANITARIOS = 
            "No se ha podido obtener la lista con sanitarios.";
    
    /* Mensajes de Éxito */
    public final static String EXITO_NUEVA_CITA = 
            "Se ha añadido la cita con id: ";
    
   
    /**
     * Crea e inicializa los componentes de NuevaCitaVista.
     * 
     * @param _menuGestionPacientesVista
     * @param _oyenteVista
     * @param _comms
     * @param _idConexion
     * @param _paciente 
     */
    public NuevaCitaVista(MenuGestionPacientesVista _menuGestionPacientesVista, 
            OyenteVista _oyenteVista, Comms _comms, String _idConexion, 
            PacienteDTO _paciente) {
        
        this.menuGestionPacientesVista  = _menuGestionPacientesVista;
        this.comms = _comms;
        this.gson = new Gson();
        this.oyenteVista = _oyenteVista;
        this.idConexion = _idConexion;
        this.pacienteSeleccionado = _paciente;
        this.pxSanitario = ProxySanitario.getInstance();
        this.sanitarios = obtenerListaConSanitarios();
        comms.nuevoObservador(this);
               
        initComponents();
        setResizable(false);  //Deshabilita la opción de maximizar-minimizar 
        pack();   // ajusta ventana y sus componentes
        setLocationRelativeTo(null);  // centra en la pantalla
        habilitarBotonConectado(idConexion);
        copiarInformaciónPacienteEnInputFields();
        cargarMedicosEnComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        paner_superior = new javax.swing.JPanel();
        nuevoCita_label = new javax.swing.JLabel();
        hospital_icon = new javax.swing.JLabel();
        b_connected = new javax.swing.JButton();
        datos_paciente_label = new javax.swing.JLabel();
        nombre_label = new javax.swing.JLabel();
        nombre_input_field = new javax.swing.JTextField();
        apellido1_label = new javax.swing.JLabel();
        apellido1_input_field = new javax.swing.JTextField();
        nss_label = new javax.swing.JLabel();
        nss_input_field = new javax.swing.JTextField();
        edad_label = new javax.swing.JLabel();
        edad_input_field = new javax.swing.JTextField();
        datos_cita_label = new javax.swing.JLabel();
        localidad_label = new javax.swing.JLabel();
        asterisco_label_localidad = new javax.swing.JLabel();
        localidad_input_field = new javax.swing.JTextField();
        centro_label = new javax.swing.JLabel();
        asterisco_label_centro = new javax.swing.JLabel();
        centro_input_field = new javax.swing.JTextField();
        sala_label = new javax.swing.JLabel();
        asterisco_label_sala = new javax.swing.JLabel();
        sala_input_field = new javax.swing.JTextField();
        asterisco_label_medico = new javax.swing.JLabel();
        medico_label = new javax.swing.JLabel();
        medico_comboBox = new javax.swing.JComboBox<>();
        fecha_label = new javax.swing.JLabel();
        asterisco_label_fecha = new javax.swing.JLabel();
        fecha_chooser = new com.toedter.calendar.JDateChooser();
        asterisco_label_hora = new javax.swing.JLabel();
        fecha_hora = new javax.swing.JLabel();
        descripcion_label = new javax.swing.JLabel();
        descripcion_input_field = new javax.swing.JTextField();
        asterisco_label_descripcion = new javax.swing.JLabel();
        campo_obligatorio_label = new javax.swing.JLabel();
        b_Cancelar = new javax.swing.JButton();
        b_Guardar = new javax.swing.JButton();
        hora_input_field = new com.toedter.components.JSpinField();
        minutos_input_field = new com.toedter.components.JSpinField();
        nombre_label1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        paner_superior.setBackground(new java.awt.Color(0, 153, 153));
        paner_superior.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        nuevoCita_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 24)); // NOI18N
        nuevoCita_label.setText("Nueva Cita");

        hospital_icon.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        hospital_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vista/imgs/hospital_icon.png"))); // NOI18N
        hospital_icon.setMaximumSize(new java.awt.Dimension(70, 70));
        hospital_icon.setMinimumSize(new java.awt.Dimension(70, 70));
        hospital_icon.setPreferredSize(new java.awt.Dimension(70, 70));

        b_connected.setBackground(new java.awt.Color(204, 204, 204));
        b_connected.setText("   ");
        b_connected.setBorder(null);
        b_connected.setEnabled(false);
        b_connected.setFocusable(false);
        b_connected.setSelected(true);

        javax.swing.GroupLayout paner_superiorLayout = new javax.swing.GroupLayout(paner_superior);
        paner_superior.setLayout(paner_superiorLayout);
        paner_superiorLayout.setHorizontalGroup(
            paner_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paner_superiorLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(hospital_icon, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(paner_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paner_superiorLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b_connected, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paner_superiorLayout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(nuevoCita_label)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        paner_superiorLayout.setVerticalGroup(
            paner_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hospital_icon, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
            .addGroup(paner_superiorLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nuevoCita_label)
                .addGap(11, 11, 11)
                .addComponent(b_connected))
        );

        datos_paciente_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        datos_paciente_label.setForeground(new java.awt.Color(0, 153, 153));
        datos_paciente_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        datos_paciente_label.setText("Datos Paciente ");
        datos_paciente_label.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        nombre_label.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        nombre_label.setText("Nombre");

        nombre_input_field.setEditable(false);

        apellido1_label.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        apellido1_label.setText("Apellido 1");

        apellido1_input_field.setEditable(false);

        nss_label.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        nss_label.setText("NSS");

        nss_input_field.setEditable(false);

        edad_label.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        edad_label.setText("Edad");

        edad_input_field.setEditable(false);

        datos_cita_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        datos_cita_label.setForeground(new java.awt.Color(0, 153, 153));
        datos_cita_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        datos_cita_label.setText("Datos Cita");
        datos_cita_label.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        localidad_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        localidad_label.setText("Localidad");

        asterisco_label_localidad.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        asterisco_label_localidad.setForeground(new java.awt.Color(255, 0, 0));
        asterisco_label_localidad.setText("*");

        localidad_input_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                localidad_input_fieldKeyTyped(evt);
            }
        });

        centro_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        centro_label.setText("Centro");

        asterisco_label_centro.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        asterisco_label_centro.setForeground(new java.awt.Color(255, 0, 0));
        asterisco_label_centro.setText("*");

        centro_input_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                centro_input_fieldKeyTyped(evt);
            }
        });

        sala_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        sala_label.setText("Sala");

        asterisco_label_sala.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        asterisco_label_sala.setForeground(new java.awt.Color(255, 0, 0));
        asterisco_label_sala.setText("*");

        sala_input_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sala_input_fieldKeyTyped(evt);
            }
        });

        asterisco_label_medico.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        asterisco_label_medico.setForeground(new java.awt.Color(255, 0, 0));
        asterisco_label_medico.setText("*");

        medico_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        medico_label.setText("Médico");

        medico_comboBox.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        medico_comboBox.setToolTipText("");
        medico_comboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                medico_comboBoxPopupMenuWillBecomeVisible(evt);
            }
        });

        fecha_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        fecha_label.setText("Fecha");

        asterisco_label_fecha.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        asterisco_label_fecha.setForeground(new java.awt.Color(255, 0, 0));
        asterisco_label_fecha.setText("*");

        fecha_chooser.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                fecha_chooserComponentAdded(evt);
            }
        });

        asterisco_label_hora.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        asterisco_label_hora.setForeground(new java.awt.Color(255, 0, 0));
        asterisco_label_hora.setText("*");

        fecha_hora.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        fecha_hora.setText("Hora");

        descripcion_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        descripcion_label.setText("Descripción");

        descripcion_input_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                descripcion_input_fieldKeyTyped(evt);
            }
        });

        asterisco_label_descripcion.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        asterisco_label_descripcion.setForeground(new java.awt.Color(255, 0, 0));
        asterisco_label_descripcion.setText("*");

        campo_obligatorio_label.setFont(new java.awt.Font("Berlin Sans FB", 2, 13)); // NOI18N
        campo_obligatorio_label.setForeground(new java.awt.Color(255, 51, 0));
        campo_obligatorio_label.setText("* Campos obligatorios");

        b_Cancelar.setBackground(new java.awt.Color(204, 204, 204));
        b_Cancelar.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        b_Cancelar.setForeground(new java.awt.Color(0, 153, 153));
        b_Cancelar.setText("Cancelar");
        b_Cancelar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        b_Cancelar.setFocusable(false);
        b_Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_CancelarActionPerformed(evt);
            }
        });

        b_Guardar.setBackground(new java.awt.Color(204, 204, 204));
        b_Guardar.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        b_Guardar.setForeground(new java.awt.Color(0, 153, 153));
        b_Guardar.setText("Guardar");
        b_Guardar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        b_Guardar.setEnabled(false);
        b_Guardar.setFocusable(false);
        b_Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_GuardarActionPerformed(evt);
            }
        });

        hora_input_field.setMaximum(23);
        hora_input_field.setMinimum(0);

        minutos_input_field.setMaximum(59);
        minutos_input_field.setMinimum(0);

        nombre_label1.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        nombre_label1.setText(":");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paner_superior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(nombre_label)
                                .addGap(18, 18, 18)
                                .addComponent(nombre_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(apellido1_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(apellido1_input_field)
                                .addGap(12, 12, 12)
                                .addComponent(nss_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nss_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(edad_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(edad_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(asterisco_label_medico)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(medico_label)
                                        .addGap(23, 23, 23)
                                        .addComponent(medico_comboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(asterisco_label_localidad)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(localidad_label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(localidad_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(asterisco_label_centro)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(asterisco_label_fecha)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fecha_label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fecha_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(centro_input_field, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(asterisco_label_sala)
                                        .addGap(1, 1, 1)
                                        .addComponent(sala_label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sala_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(asterisco_label_hora)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fecha_hora)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(hora_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nombre_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(minutos_input_field, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(asterisco_label_descripcion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(descripcion_input_field)
                                    .addComponent(descripcion_label)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(campo_obligatorio_label, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(321, 321, 321)
                                .addComponent(centro_label))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(319, 319, 319)
                                .addComponent(datos_paciente_label)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b_Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(334, 334, 334)
                .addComponent(datos_cita_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(paner_superior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(datos_paciente_label)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombre_label)
                    .addComponent(apellido1_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apellido1_label)
                    .addComponent(nss_label)
                    .addComponent(nss_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edad_label)
                    .addComponent(edad_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombre_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(datos_cita_label)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(localidad_label)
                                    .addComponent(localidad_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(centro_label)
                                    .addComponent(centro_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sala_label)
                                    .addComponent(sala_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(asterisco_label_localidad, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(asterisco_label_centro, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(asterisco_label_sala, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(medico_label)
                                        .addComponent(medico_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(asterisco_label_medico, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(fecha_label)
                                        .addComponent(asterisco_label_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(fecha_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(hora_input_field, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(minutos_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nombre_label1)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fecha_hora)
                            .addComponent(asterisco_label_hora, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(asterisco_label_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descripcion_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descripcion_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(campo_obligatorio_label, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Obtiene la lista con los sanitarios dados de alta en el sistema
     * 
     * @return List<SanitarioDTO>
     * @throws Exception 
     */
    private List<SanitarioDTO> obtenerListaConSanitarios(){
        Gson gson = new Gson();
        List<SanitarioDTO> sanitarios = null;
        String sanitariosToReceive = null;
        
        try {
            sanitariosToReceive = pxSanitario.obtenerSanitarios();
            
            if (sanitariosToReceive != null){
                /* Permite obtener los sanitarios en un List con SanitarioDTO*/
                java.lang.reflect.Type listType = new TypeToken<List<SanitarioDTO>>(){}.getType(); 
                sanitarios = gson.fromJson(sanitariosToReceive, listType);
            } else{
                throw new Exception(ERROR_OBTENER_SANITARIOS);
            }
        } catch (Exception ex) {
            mensajeDialogo(ex.getMessage(), JOptionPane.ERROR);
        }
        
        return sanitarios;
    }
    
    /**
     * Introduce en el comboBox los médicos dados de alta en el sistema.
     * 
     */
    private void cargarMedicosEnComboBox(){
        medico_comboBox.setEditable(true);
        for(SanitarioDTO sanitario: sanitarios){
            if(sanitario.getPuestoTrabajo().equals("Médico")){
                medico_comboBox.addItem(sanitario.getNombre() + " " + 
                                        sanitario.getApellido1() + " " + 
                                        sanitario.getApellido2());
            }   
        }
        medico_comboBox.setEditable(false);
        
        /* No muestra ninguna selección en el comboBox sin entrada del usuario */
        medico_comboBox.setSelectedIndex(INDEX_MEDICO_NO_SELECCIONADO);
        medico_comboBox.setSelectedItem(null);
    }
    
    /**
     * Muestra un botón con el estado de la appCliente,
     * se mostrará el color verde si la conexión con el servidor
     * ha sido exitosa o el color amarillo en caso contrario. 
     * 
     * @param _idConexion 
     */
    private void habilitarBotonConectado(String _idConexion){
        if (idConexion.equals("0")){
            b_connected.setEnabled(false);
            b_connected.setText("Disconnected");
            b_connected.setBackground(Color.YELLOW);
        } else{
            b_connected.setEnabled(true);
            b_connected.setText("Connected with id " + _idConexion);
            b_connected.setBackground(Color.GREEN);
        }
    }
    
    /**
     * Escribe mensaje con diálogo modal.
     * 
     * @param _mensaje
     * @param _messageType
     */    
    public void mensajeDialogo(String _mensaje, int _messageType) {
        JOptionPane.showMessageDialog(this, _mensaje, 
            Hospital.TITULO + " " + Hospital.VERSION, 
            _messageType,  null);    
    } 
    
    /**
     * Introduce la información del paciente seleccionado en los input fields
     * del apartado correspondiente a "Datos Paciente".
     * 
     */
    private void copiarInformaciónPacienteEnInputFields(){
        nombre_input_field.setText(pacienteSeleccionado.getNombre());
        apellido1_input_field.setText(pacienteSeleccionado.getApellido1());
        nss_input_field.setText(pacienteSeleccionado.getNss());
        edad_input_field.setText(String.valueOf(pacienteSeleccionado.getEdad()));
    }
    
    /**
     * Habilita el botón Guardar si todos los campos 
     * han sido completados y no poseen solo valores en blanco.
     * 
     */
    private void changed(){  
        if (localidad_input_field.getText().isBlank() || 
            centro_input_field.getText().isBlank() || 
            sala_input_field.getText().isBlank() ||
            medico_comboBox.getSelectedItem() == null ||
            fecha_chooser.getDate() == null ||
            descripcion_input_field.getText().isBlank()){
            
            b_Guardar.setEnabled(false);
        }
        else {
            b_Guardar.setEnabled(true);
        }
    }
    
    /**
     * Captura los eventos relacionados con la modificación del campo "médico".
     * 
     * @param evt
     */
    private void medico_comboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_medico_comboBoxPopupMenuWillBecomeVisible
        changed();
    }//GEN-LAST:event_medico_comboBoxPopupMenuWillBecomeVisible

    /**
     * Captura los eventos relacionados con la modificación del campo "fecha".
     * 
     * @param evt
     */
    private void fecha_chooserComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_fecha_chooserComponentAdded
        changed();
    }//GEN-LAST:event_fecha_chooserComponentAdded

    /**
     * Captura los eventos relacionados con la modificación del campo "descripción".
     * 
     * @param evt
     */
    private void descripcion_input_fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descripcion_input_fieldKeyTyped
        changed();
    }//GEN-LAST:event_descripcion_input_fieldKeyTyped

    /**
     * Cierra la ventana actual y regresa a la ventana MenuGestionPacientesVista
     * 
     * @param evt 
     */
    private void b_CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_CancelarActionPerformed
        this.dispose();
        menuGestionPacientesVista.setVisible(true);
    }//GEN-LAST:event_b_CancelarActionPerformed

    /**
     * Obtiene el sanitarioDTO del médico seleccionado para atender una cita
     * 
     * @param _nombre
     * @param _ap1
     * @param _ap2
     * @return SanitarioDTO
     */
    private SanitarioDTO obtenerMedicoDeComboBox(String _nombre, String _ap1, String _ap2){
        for(SanitarioDTO sanitario: sanitarios){
            if(sanitario.getNombre().equals(_nombre) &&
               sanitario.getApellido1().equals(_ap1) &&
               sanitario.getApellido2().equals(_ap2)){
                
                return sanitario;
            }
        }
        return null;
    }
    
    /**
     * Captura la información de los campos rellenados por el usuario y
     * crea el json de una cita nueva
     * 
     * @return String
     */
    private String crearJsonCitaNueva() throws ParseException{
        int id = 0;
        String datosMedicoComboBox[] = String.valueOf(medico_comboBox.getSelectedItem()).split(" ");
        SanitarioDTO medicoAtiendeCita  = obtenerMedicoDeComboBox(datosMedicoComboBox[INDEX_NOMBRE_MEDICO], 
                                                                  datosMedicoComboBox[INDEX_APELLIDO_1_MEDICO], 
                                                                  datosMedicoComboBox[INDEX_APELLIDO_2_MEDICO]);
        String dniMedico = medicoAtiendeCita.getDni();
        String localidad = localidad_input_field.getText();
        String centro = centro_input_field.getText();
        String sala = sala_input_field.getText();
        Ubicacion ubicacion = new Ubicacion(localidad, centro, sala);
        Date fecha = fecha_chooser.getDate();
        int hora = hora_input_field.getValue();
        int minutos = minutos_input_field.getValue();
        String fechaStr = "Jul 27, 2000 " + hora + ":" + minutos;
        SimpleDateFormat readFormat = new SimpleDateFormat("MMM dd, yyyy hh:mm");
        String descripcion = descripcion_input_field.getText();
        
        Date tiempo = readFormat.parse(fechaStr);
        
        CitaPacienteDTO cita = new CitaPacienteDTO(id, dniMedico, ubicacion, fecha, tiempo, descripcion);
        
        return cita.toJson();
    }
        
    /**
     * Envía la solicitud para añadir una nueva cita a un paciente
     * 
     * @param evt 
     */
    private void b_GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_GuardarActionPerformed
        try {
            String citaJsonToSend = crearJsonCitaNueva();
            
            if (citaJsonToSend != null){
                oyenteVista.eventoProducido(OyenteVista.Evento.NUEVA_CITA, 
                    new Tupla <String, String>(citaJsonToSend,
                                           pacienteSeleccionado.getNss()));
            } else{
                throw new Exception(ERROR_NUEVA_CITA);
            }
        } catch (Exception ex) {
            mensajeDialogo(ex.getMessage(), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_b_GuardarActionPerformed

    /**
     * Captura el evento relacionado con el cierre de la ventana, y 
     * envía el evento a la capa control para realizar las acciones
     * de finalización necesarias para la appCliente.
     * 
     * @param evt
     */    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        oyenteVista.eventoProducido(OyenteVista.Evento.SALIR, null);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Captura los eventos relacionados con la modificación del campo "localidad".
     * 
     * @param evt
     */
    private void localidad_input_fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_localidad_input_fieldKeyTyped
        changed();
    }//GEN-LAST:event_localidad_input_fieldKeyTyped

    /**
     * Captura los eventos relacionados con la modificación del campo "centro".
     * 
     * @param evt
     */
    private void centro_input_fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_centro_input_fieldKeyTyped
        changed();
    }//GEN-LAST:event_centro_input_fieldKeyTyped

    /**
     * Captura los eventos relacionados con la modificación del campo "sala".
     * 
     * @param evt
     */
    private void sala_input_fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sala_input_fieldKeyTyped
        changed();
    }//GEN-LAST:event_sala_input_fieldKeyTyped

    /**
     * Recibe evento añadir nueva cita
     * 
     * @param _evt 
     */
    private void propiedadNuevaCita(PropertyChangeEvent _evt){
        String citaJsonToReceive = (String)_evt.getNewValue();
        CitaPacienteDTO citaDTOReceived = gson.fromJson(citaJsonToReceive, CitaPacienteDTO.class);
        
        mensajeDialogo(EXITO_NUEVA_CITA + citaDTOReceived.getIdentificador(),
            JOptionPane.INFORMATION_MESSAGE);
       
        comms.eliminarObservador(this);
        this.dispose();
        menuGestionPacientesVista.setVisible(true);      
    }    
    
    /**
     * Sobreescribe propertyChange para recibir cambios de modelo.
     * 
     * @param _evt 
     */
    @Override
    public void propertyChange(PropertyChangeEvent _evt) {
        if (_evt.getPropertyName().equals(
            ProxyCitaPaciente.PROPIEDAD_NUEVA_CITA)) {
            
            propiedadNuevaCita(_evt);
        } 
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField apellido1_input_field;
    private javax.swing.JLabel apellido1_label;
    private javax.swing.JLabel asterisco_label_centro;
    private javax.swing.JLabel asterisco_label_descripcion;
    private javax.swing.JLabel asterisco_label_fecha;
    private javax.swing.JLabel asterisco_label_hora;
    private javax.swing.JLabel asterisco_label_localidad;
    private javax.swing.JLabel asterisco_label_medico;
    private javax.swing.JLabel asterisco_label_sala;
    private javax.swing.JButton b_Cancelar;
    private javax.swing.JButton b_Guardar;
    private javax.swing.JButton b_connected;
    private javax.swing.JLabel campo_obligatorio_label;
    private javax.swing.JTextField centro_input_field;
    private javax.swing.JLabel centro_label;
    private javax.swing.JLabel datos_cita_label;
    private javax.swing.JLabel datos_paciente_label;
    private javax.swing.JTextField descripcion_input_field;
    private javax.swing.JLabel descripcion_label;
    private javax.swing.JTextField edad_input_field;
    private javax.swing.JLabel edad_label;
    private com.toedter.calendar.JDateChooser fecha_chooser;
    private javax.swing.JLabel fecha_hora;
    private javax.swing.JLabel fecha_label;
    private com.toedter.components.JSpinField hora_input_field;
    private javax.swing.JLabel hospital_icon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField localidad_input_field;
    private javax.swing.JLabel localidad_label;
    private javax.swing.JComboBox<String> medico_comboBox;
    private javax.swing.JLabel medico_label;
    private com.toedter.components.JSpinField minutos_input_field;
    private javax.swing.JTextField nombre_input_field;
    private javax.swing.JLabel nombre_label;
    private javax.swing.JLabel nombre_label1;
    private javax.swing.JTextField nss_input_field;
    private javax.swing.JLabel nss_label;
    private javax.swing.JLabel nuevoCita_label;
    private javax.swing.JPanel paner_superior;
    private javax.swing.JTextField sala_input_field;
    private javax.swing.JLabel sala_label;
    // End of variables declaration//GEN-END:variables
}
