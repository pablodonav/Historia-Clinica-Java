/**
 * CitasPacienteVista.java
 * Adnana Catrinel Dragut
 * v2.0 30/04/2022.
 * 
 */
package vista.vistasUsuarioSanitario;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import control.Hospital;
import control.OyenteVista;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.clasesDTOs.CitaPacienteDTO;
import modelo.clasesDTOs.PacienteDTO;
import modelo.clasesDTOs.Tupla;
import modelo.clasesProxys.Comms;
import modelo.clasesProxys.ProxyCitaPaciente;
import modelo.clasesProxys.ProxyPaciente;

/**
 * Clase que contiene los métodos para crear y gestionar 
 * los componentes y los eventos de la pantalla CitasPacienteVista.
 * 
 */
public class CitasPacienteVista extends javax.swing.JFrame implements PropertyChangeListener{
    private MenuGestionPacientesVista menuGestionPacientesVista = null;
    private Comms comms = null;
    private Gson gson = null;
    private OyenteVista oyenteVista = null;
    private String idConexion = null;
    private ProxyPaciente pxPaciente = null;
    private PacienteDTO pacienteSeleccionado = null;
    private List<CitaPacienteDTO> citas = null;
    private DefaultTableModel tableModel = null;
    private boolean botonEliminarPulsado = false;
    
    private static final int INDEX_COLUMNA_ID = 0;
    private static final int INDEX_CITA_NO_SELECCIONADA = -1;
    
    /* Mensajes de Error */
    private final String ERROR_OBTENER_CITAS = 
            "No se ha podido obtener la lista con citas.";
    public final static String ERROR_ELIMINAR_CITA = 
            "No se ha podido realizar la operación para eliminar una cita.\n";
    
    /* Mensajes de Éxito */
    public final static String EXITO_ELIMINAR_CITA = 
            "Se ha eliminado la cita con id: ";
    
    /**
     * Crea e inicializa los componentes de CitasPacienteVista.
     * 
     * @param _menuGestionPacientesVista
     * @param _oyenteVista
     * @param _comms
     * @param _idConexion
     * @param _paciente 
     */
    public CitasPacienteVista(MenuGestionPacientesVista _menuGestionPacientesVista, 
            OyenteVista _oyenteVista, Comms _comms, String _idConexion, PacienteDTO _paciente) {
        
        this.menuGestionPacientesVista  = _menuGestionPacientesVista;
        this.comms = _comms;
        this.gson = new Gson();
        this.oyenteVista = _oyenteVista;
        this.idConexion = _idConexion;
        this.pxPaciente = ProxyPaciente.getInstance();
        this.pacienteSeleccionado = _paciente;
        this.citas = obtenerListaConCitas();
        comms.nuevoObservador(this);
       
        initComponents();
        setResizable(false);  //Deshabilita la opción de maximizar-minimizar 
        pack();   // ajusta ventana y sus componentes
        setLocationRelativeTo(null);  // centra en la pantalla
        habilitarBotonConectado(idConexion);
        copiarInformaciónPacienteEnInputFields();
        cargarTablaConCitas();
        
        /* Subraya el texto "Datos Paciente" */
        datos_paciente_label.setText("<HTML><U>Datos Paciente</U></HTML>");
        
        /* Subraya el texto "Lista Citas" */
        lista_de_citas_label.setText("<HTML><U>Lista Citas</U></HTML>");
        
        b_AnularCita.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        paner_superior = new javax.swing.JPanel();
        citasPaciente_label = new javax.swing.JLabel();
        hospital_icon = new javax.swing.JLabel();
        b_connected = new javax.swing.JButton();
        datos_paciente_label = new javax.swing.JLabel();
        nombre_label = new javax.swing.JLabel();
        nombre_input_field = new javax.swing.JTextField();
        apellido1_label = new javax.swing.JLabel();
        apellido1_input_field = new javax.swing.JTextField();
        nss_label = new javax.swing.JLabel();
        nss_input_field = new javax.swing.JTextField();
        edad_label = new javax.swing.JLabel();
        edad_input_field = new javax.swing.JTextField();
        lista_de_citas_label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_con_citas = new javax.swing.JTable();
        b_AnularCita = new javax.swing.JButton();
        b_Atrás = new javax.swing.JButton();
        b_Refresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        paner_superior.setBackground(new java.awt.Color(0, 153, 153));
        paner_superior.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        citasPaciente_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 24)); // NOI18N
        citasPaciente_label.setText("Citas Paciente");

        hospital_icon.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        hospital_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vista/imgs/hospital_icon.png"))); // NOI18N
        hospital_icon.setMaximumSize(new java.awt.Dimension(70, 70));
        hospital_icon.setMinimumSize(new java.awt.Dimension(70, 70));
        hospital_icon.setPreferredSize(new java.awt.Dimension(70, 70));

        b_connected.setBackground(new java.awt.Color(204, 204, 204));
        b_connected.setText("   ");
        b_connected.setBorder(null);
        b_connected.setEnabled(false);
        b_connected.setFocusable(false);
        b_connected.setSelected(true);

        javax.swing.GroupLayout paner_superiorLayout = new javax.swing.GroupLayout(paner_superior);
        paner_superior.setLayout(paner_superiorLayout);
        paner_superiorLayout.setHorizontalGroup(
            paner_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paner_superiorLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(hospital_icon, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(paner_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paner_superiorLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 383, Short.MAX_VALUE)
                        .addComponent(b_connected, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paner_superiorLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(citasPaciente_label)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        paner_superiorLayout.setVerticalGroup(
            paner_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hospital_icon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(paner_superiorLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(citasPaciente_label)
                .addGap(14, 14, 14)
                .addComponent(b_connected))
        );

        datos_paciente_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        datos_paciente_label.setForeground(new java.awt.Color(0, 153, 153));
        datos_paciente_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        datos_paciente_label.setText("Datos Paciente ");
        datos_paciente_label.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        nombre_label.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        nombre_label.setText("Nombre");

        nombre_input_field.setEditable(false);

        apellido1_label.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        apellido1_label.setText("Apellido 1");

        apellido1_input_field.setEditable(false);

        nss_label.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        nss_label.setText("NSS");

        nss_input_field.setEditable(false);

        edad_label.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        edad_label.setText("Edad");

        edad_input_field.setEditable(false);

        lista_de_citas_label.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        lista_de_citas_label.setForeground(new java.awt.Color(0, 153, 153));
        lista_de_citas_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lista_de_citas_label.setText("Lista de Citas");
        lista_de_citas_label.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        tabla_con_citas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Ubicación", "Médico", "Fecha", "Hora", "Descripción"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_con_citas.setFocusable(false);
        tabla_con_citas.setGridColor(new java.awt.Color(0, 153, 153));
        tabla_con_citas.setRowHeight(20);
        tabla_con_citas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabla_con_citas.setShowGrid(true);
        tabla_con_citas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla_con_citasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabla_con_citas);
        if (tabla_con_citas.getColumnModel().getColumnCount() > 0) {
            tabla_con_citas.getColumnModel().getColumn(0).setPreferredWidth(3);
            tabla_con_citas.getColumnModel().getColumn(1).setPreferredWidth(30);
        }

        b_AnularCita.setBackground(new java.awt.Color(204, 204, 204));
        b_AnularCita.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        b_AnularCita.setForeground(new java.awt.Color(0, 153, 153));
        b_AnularCita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vista/imgs/cross_icon.png"))); // NOI18N
        b_AnularCita.setText("Anular Cita");
        b_AnularCita.setActionCommand("   Nuevo Sanitario");
        b_AnularCita.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        b_AnularCita.setEnabled(false);
        b_AnularCita.setFocusable(false);
        b_AnularCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_AnularCitaActionPerformed(evt);
            }
        });

        b_Atrás.setBackground(new java.awt.Color(204, 204, 204));
        b_Atrás.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        b_Atrás.setForeground(new java.awt.Color(0, 153, 153));
        b_Atrás.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vista/imgs/atras_icon.png"))); // NOI18N
        b_Atrás.setText("   Atrás");
        b_Atrás.setActionCommand("   Nuevo Sanitario");
        b_Atrás.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        b_Atrás.setFocusable(false);
        b_Atrás.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_AtrásActionPerformed(evt);
            }
        });

        b_Refresh.setBackground(new java.awt.Color(204, 204, 204));
        b_Refresh.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        b_Refresh.setForeground(new java.awt.Color(0, 153, 153));
        b_Refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vista/imgs/refresh_icon.png"))); // NOI18N
        b_Refresh.setActionCommand("   Nuevo Sanitario");
        b_Refresh.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        b_Refresh.setFocusable(false);
        b_Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_RefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paner_superior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(nombre_label)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(nombre_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(apellido1_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(lista_de_citas_label))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(apellido1_input_field)
                                        .addGap(12, 12, 12)
                                        .addComponent(nss_label)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nss_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(edad_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(edad_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(b_AnularCita, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b_Atrás, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(b_Refresh)
                                .addGap(233, 233, 233)
                                .addComponent(datos_paciente_label)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(paner_superior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datos_paciente_label)
                    .addComponent(b_Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombre_label)
                    .addComponent(apellido1_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apellido1_label)
                    .addComponent(nss_label)
                    .addComponent(nss_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edad_label)
                    .addComponent(edad_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombre_input_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lista_de_citas_label)
                        .addGap(116, 116, 116)
                        .addComponent(b_AnularCita, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 42, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b_Atrás, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(199, 199, 199)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(83, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Obtiene la lista con las citas de un paciente
     * 
     * @return List<CitaPacienteDTO>
     * @throws Exception 
     */
    private List<CitaPacienteDTO> obtenerListaConCitas(){
        Gson gson = new Gson();
        List<CitaPacienteDTO> citas = null;
        String citasToReceive;
        
        try {
            citasToReceive = pxPaciente.obtenerCitasPaciente(pacienteSeleccionado.getNss());
            
            if(citasToReceive != null){
                /* Permite obtener las citas en un List con CitaPacienteDTO */
                java.lang.reflect.Type listType = new TypeToken<List<CitaPacienteDTO>>(){}.getType(); 
                citas = gson.fromJson(citasToReceive, listType);
            } else{
                throw new Exception(ERROR_OBTENER_CITAS);
            }
        } catch (Exception ex) {
            mensajeDialogo(ex.getMessage(), JOptionPane.ERROR);
        }
        
        return citas;
    }
    
    /**
     * Muestra un botón con el estado de la appCliente,
     * se mostrará el color verde si la conexión con el servidor
     * ha sido exitosa o el color amarillo en caso contrario. 
     * 
     * @param _idConexion 
     */
    private void habilitarBotonConectado(String _idConexion){
        if (idConexion.equals("0")){
            b_connected.setEnabled(false);
            b_connected.setText("Disconnected");
            b_connected.setBackground(Color.YELLOW);
        } else{
            b_connected.setEnabled(true);
            b_connected.setText("Connected with id " + _idConexion);
            b_connected.setBackground(Color.GREEN);
        }
    }

    /**
     * Escribe mensaje con diálogo modal.
     * 
     * @param _mensaje
     * @param _messageType
     */    
    public void mensajeDialogo(String _mensaje, int _messageType) {
        JOptionPane.showMessageDialog(this, _mensaje, 
            Hospital.TITULO + " " + Hospital.VERSION, 
            _messageType,  null);    
    } 
    
    /**
     * Rellena la tabla con la información de las citas del
     * paciente seleccionado.
     * 
     */
    private void cargarTablaConCitas(){
        tableModel = (DefaultTableModel) tabla_con_citas.getModel();
        tableModel.getDataVector().removeAllElements();

        for (int i = 0; i < citas.size(); i++){
            CitaPacienteDTO cita = citas.get(i);
            tableModel.addRow(cita.toArray());
        }
    }
    
    /**
     * Introduce la información del paciente seleccionado en los input fields
     * del apartado correspondiente a "Datos Paciente".
     * 
     */
    private void copiarInformaciónPacienteEnInputFields(){
        nombre_input_field.setText(pacienteSeleccionado.getNombre());
        apellido1_input_field.setText(pacienteSeleccionado.getApellido1());
        nss_input_field.setText(pacienteSeleccionado.getNss());
        edad_input_field.setText(String.valueOf(pacienteSeleccionado.getEdad()));
    }
    
    /**
     * Habilita el botón "añadir diagnóstico" en el caso en el que se ha seleccionado
     * un episodio de la tabla
     * 
     * @param evt 
     */
    private void tabla_con_citasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_con_citasMouseClicked
        if (tabla_con_citas.getSelectedRow() != INDEX_CITA_NO_SELECCIONADA){
            b_AnularCita.setEnabled(true);
        }
    }//GEN-LAST:event_tabla_con_citasMouseClicked

    /**
     * Obtener el id de la cita seleccionada en la tabla
     * 
     * @param _indexCitaSeleccionada
     * @return String
     */
    private String obtenerIdCitaSeleccionada(int _indexCitaSeleccionada){
        return  String.valueOf(tabla_con_citas.getValueAt(
                    _indexCitaSeleccionada, INDEX_COLUMNA_ID));
    }
    
    /**
     * Envía la solicitud para eliminar una cita a la capa control
     * 
     * @param evt 
     */
    private void b_AnularCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_AnularCitaActionPerformed
        int indexCitaSeleccionada = tabla_con_citas.getSelectedRow();
                
        if (indexCitaSeleccionada != INDEX_CITA_NO_SELECCIONADA){
            /* Permite saber si el usuario actual es el que ha solicitado la operación de anular una cita */
            botonEliminarPulsado = true;
            
            String idCita = obtenerIdCitaSeleccionada(indexCitaSeleccionada);

            oyenteVista.eventoProducido(OyenteVista.Evento.ELIMINAR_CITA,
                new Tupla <String, String>(idCita, pacienteSeleccionado.getNss()));
        }   
        
        /* Deshabilita botón hasta la próxima selección */
        b_AnularCita.setEnabled(false);
    }//GEN-LAST:event_b_AnularCitaActionPerformed

    /**
     * Cierra la ventana actual y regresa a la ventana MenuGestionPacientesVista
     * 
     * @param evt 
     */
    private void b_AtrásActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_AtrásActionPerformed
        comms.eliminarObservador(this);
        this.dispose();
        menuGestionPacientesVista.setVisible(true);
    }//GEN-LAST:event_b_AtrásActionPerformed

    /**
     * Captura el evento relacionado con el cierre de la ventana, y 
     * envía el evento a la capa control para realizar las acciones
     * de finalización necesarias para la appCliente.
     * 
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        oyenteVista.eventoProducido(OyenteVista.Evento.SALIR, null);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Refresca la lista de citas
     * 
     * @param evt 
     */
    private void b_RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_RefreshActionPerformed
        this.citas = obtenerListaConCitas();
        cargarTablaConCitas();
    }//GEN-LAST:event_b_RefreshActionPerformed

    /**
     * Obtener el índice del citaPacienteDTO seleccionado en la tabla
     * 
     * @param _idCitaPaciente
     * @return int
     */
    private int obtenerIndexCitaPaciente(int _idCitaPaciente){
        System.out.println("idCita " + _idCitaPaciente);
        for(CitaPacienteDTO cita: citas){
            if(cita.getIdentificador() == _idCitaPaciente){
                return citas.indexOf(cita);
            }
        }
        return INDEX_CITA_NO_SELECCIONADA;
    }
    
    /**
     * Recibe evento eliminar cita
     * 
     * @param _evt 
     */
    private void propiedadEliminarCita(PropertyChangeEvent _evt){
        String idCitaToReceive = (String)_evt.getNewValue();
        int indexCitaSeleccionada = obtenerIndexCitaPaciente(Integer.parseInt(idCitaToReceive));
        
        if(botonEliminarPulsado){
            mensajeDialogo(EXITO_ELIMINAR_CITA + idCitaToReceive,
                JOptionPane.INFORMATION_MESSAGE);
            botonEliminarPulsado = false; 
        }
       
        citas.remove(indexCitaSeleccionada);
        tableModel.removeRow(indexCitaSeleccionada);      
    } 
    
    /**
     * Sobreescribe propertyChange para recibir cambios de modelo.
     * 
     * @param _evt 
     */
    @Override
    public void propertyChange(PropertyChangeEvent _evt) {
        if (_evt.getPropertyName().equals(
            ProxyCitaPaciente.PROPIEDAD_ELIMINAR_CITA)) {
            
            propiedadEliminarCita(_evt);
        } 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField apellido1_input_field;
    private javax.swing.JLabel apellido1_label;
    private javax.swing.JButton b_AnularCita;
    private javax.swing.JButton b_Atrás;
    private javax.swing.JButton b_Refresh;
    private javax.swing.JButton b_connected;
    private javax.swing.JLabel citasPaciente_label;
    private javax.swing.JLabel datos_paciente_label;
    private javax.swing.JTextField edad_input_field;
    private javax.swing.JLabel edad_label;
    private javax.swing.JLabel hospital_icon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lista_de_citas_label;
    private javax.swing.JTextField nombre_input_field;
    private javax.swing.JLabel nombre_label;
    private javax.swing.JTextField nss_input_field;
    private javax.swing.JLabel nss_label;
    private javax.swing.JPanel paner_superior;
    private javax.swing.JTable tabla_con_citas;
    // End of variables declaration//GEN-END:variables
}
